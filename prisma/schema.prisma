// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client" // Required
  output   = "../generated/prisma" // Required path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TripStatus {
  PLANNING
  FINALIZED
  REALIZED
}

model TripCircle {
  id          String       @id @default(cuid())
  title       String // trip name
  description String?
  status      TripStatus   @default(PLANNING)
  inviteCode  String       @unique
  createdAt   DateTime     @default(now())
  members     TripMember[]
  boards      Board[]

  startDate DateTime?
  endDate   DateTime?
}

model TripMember {
  id           String              @id @default(cuid())
  clientId     String? // fallback for non-authenticated users
  isOrganizer  Boolean
  username     String
  tripCircle   TripCircle          @relation(fields: [tripCircleId], references: [id], onDelete: Cascade)
  tripCircleId String
  joinedAt     DateTime            @default(now())
  comments     SuggestionComment[]

  @@index([clientId])
  @@index([tripCircleId])
}

model Board {
  id           String       @id @default(cuid())
  title        String
  type         String // e.g., "location", "food", "activity", etc.
  tripCircle   TripCircle   @relation(fields: [tripCircleId], references: [id])
  tripCircleId String
  suggestions  Suggestion[]

  @@index([tripCircleId])
}

model Suggestion {
  id          String              @id @default(cuid())
  title       String
  url         String?
  ogImage     String?
  description String?
  createdAt   DateTime            @default(now())
  createdBy   String? // FK to User.id or TripMember.id
  board       Board               @relation(fields: [boardId], references: [id])
  boardId     String
  comments    SuggestionComment[]

  @@index([boardId])
  @@index([createdBy])
}

model SuggestionComment {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  suggestionId String
  author       TripMember @relation(fields: [authorId], references: [id])
  authorId     String

  @@index([suggestionId])
  @@index([authorId])
}
